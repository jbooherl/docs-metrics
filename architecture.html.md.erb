---
breadcrumb: PCF Metrics Documentation
title: PCF Metrics Product Architecture
owner: PCF Metrics
---

This topic describes the product architecture of Pivotal Cloud Foundry (PCF) Metrics.

## <a id="overview"></a>Overview

The diagram below displays the components of PCF Metrics in bold, as well as the Cloud Foundry components that the PCF Metrics system interacts with.

PCF Metrics deploys several Cloud Foundry apps as part of the install process. These components are the bold rectangles in the diagram. The cylinders represent the data storage components of PCF Metrics.

<%= image_tag('images/architecture.png') %>

See the following sections to understand the several processes that happen within the PCF Metrics system.

##<a id="data-flow"></a> How Data Flows from the Firehose to the Datastores

This section describes how PCF Metrics fills its datastores. PCF Metrics uses two datastores:

* The MySQL component stores metric and event data from the apps running on your PCF deployment.
	* Examples of events are `start` and `stop`.
	* Examples of metrics are _container metrics_ such as CPU and _network metrics_ such as Requests.
* The Elasticsearch component stores logs from the apps running on your PCF deployment.

### Components

The diagram below highlights the components involved in the process of getting metric and log data into the Elasticsearch and MySQL datastore.

![flow one](flow1.png)

### Process

The following table describes how the components act during each stage.

<table>
	<tr>
		<th>Stage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td valign="top">1</td>
		<td>The <code>metrics-ingestor</code> app does the following:<br>
			<ul>
				<li>Receives app logs from the Firehose and forwards them to both the <code>elasticsearch-logqueue</code> and <code>mysql-logqueue</code> apps</li>
				<li>Receives container metrics and network metrics (HTTPStartStop events) from the Firehose and forwards them to the <code>mysql-logqueue</code> app</li>
			</ul>
		</td>
	</tr>
	<tr>
		<td valign="top">2</td>
		<td>
		Each of the logqueues act independently, writing information to the datastores:
		<br><br>
		<b>Elasticsearch logqueue</b>
		<br><br>
		The <code>elasticsearch-logqueue</code> app buffers logs and writes them to the Elasticsearch datastore.
		<br><br>
		<b>MySQL logqueue</b>
		<br><br>
		The <code>mysql-logqueue</code> app buffers logs and writes each data type to MySQL as follows:<br><br>
		<ul>
			<li><b>Container metrics</b>: Inserts messages into the <code>container_metric</code> table of MySQL</li>
			<li><b>Network</b>: Inserts messages into the <code>http_start_stop</code> table of MySQL</li>
			<li><b>App logs</b>: Parses log messages for an app event name and inserts the message into the <code>app_event</code> table of MySQL</li>
		</ul>
	</tr>
	<tr>
		<td valign="top">3</td>
		<td>The <code>metrics-aggregator</code> app, which runs according to an <code>AGGREGATE_FREQUENCY</code> property, does the following to aggregate the data stored in MySQL:<br><br>
		<ol>
			<li>Retrieves container and network metrics from MySQL</li>
			<li>Aggregates the data for each app over the last four minutes, grouped by one minute intervals</li>
			<li>Inserts the aggregated data into the <code>app_metric_rollup</code> table of the MySQL component
			</li>
		</ol>
		</td>
	</tr>
</table>

##<a id="user-flow"></a> How the PCF Metrics UI Retrieves Data from the Datastores

This section describes the flow of data through the system when you interact with the PCF Metrics UI.

### Components

The diagram below highlights the components involved in this process.

![Flow 2](flow2.png)

### Process

The following table describes how the components act during each stage.

<table>
	<tr><th>Stage</th><th>Description</th></tr>
	<tr><td valign="top">1</td>
		<td>
			A user launches <code>metrics.SYSTEM-DOMAIN</code> in a browser and enters her UAA credentials.
		</td>
	</tr>
	<tr><td valign="top">2</td>
		<td>
			After the UAA authorizes the user, the browser does the following:
			<br><br>
			<ol>
				<li>Retrieves through the Cloud Controller API a list of apps that the user can access</li>
				<li>Displays a page in which the user can select any app returned by the Cloud Controller API</li>
			</ol>
		</td>
	</tr>
	<tr><td valign="top">3</td>
		<td>
			A user selects an app from the dropdown menu, which does the following:<br></br>
			<ol>
				<li>Opens a Server-Sent Events (SSE) connection  to the <code>metrics</code> app (metrics API) </li>
				<li>Sends HTTP Put requests to the metrics API to retrieve metrics and logs for the specified time frame</li>
			</ol>
		</td>
	</tr>
	<tr>
		<td valign="top">4</td>
		<td>
			The metrics API receives the requests from the browser and does the following:
			<br><br>
			<ol>
				<li>Communicates with the UAA and Cloud Controller to confirm that the user can access data for the requested app</li>
				<li>Creates jobs on Redis channels that describe the type of metric, log, or event requested, as well as the time period</li>
				<p class="note"><strong>Note</strong>: PCF Metrics uses Redis as a <a href="http://redis.io/topics/pubsub">pub-sub</a> mechanism between the metrics API and worker apps to marshal metrics and logs.</p>
			</ol>
		</td>
	</tr>
	<tr>
		<td valign="top">
			5
		</td>
		<td>
			The <code>worker-app-dev</code> and <code>worker-app-logs</code> apps, which subscribe to the job channels on Redis, recognize the jobs created by the metrics API. The apps remove their corresponding jobs and do the following:<br><br>
			<ol>
				<li>Retrieve data from the datastores:
					<ol>
						<li><code>worker-app-dev</code> queries MySQL to retrieve any metrics and events requested for the time period.</li>
						<li><code>worker-app-logs</code> queries Elasticsearch to retrieve the logs for the time period requested.</li>
					</ol>
				</li>
				<li>Publish the data to Redis</li>
			</ol>
		</td>
	</tr>
	<tr>
		<td valign="top">6</td>
		<td>Redis forwards the data to the metrics API.</td>
	</tr>
	<tr>
		<td valign="top">7</td>
		<td>The metrics API streams the data to the browser over SSE, and the PCF Metrics UI displays the data requested by the user.</td>
	</tr>
</table>

## <a id="workers"></a> How Worker Apps Monitor the System

The following table describes the two worker components that PCF Metrics uses to monitor other components in the system.

<table>
	<tr>
		<th width="28%">Worker Component</th>
		<th>Function</th>
	</tr>
	<tr>
		<td><code>worker-health-check</code></td>
		<td>The health-check worker is an app that does the following every minute:<br><br>
		<ul>
			<li>Checks whether the apps deployed by PCF Metrics can reach the MySQL, Elasticsearch, and Redis datastores</li>
			<li>Records the number of MySQL connections and Redis channels</li>
		</ul>
		 </td>
	</tr>
	<tr>
		<td><code>worker-reaper</code></td>
		<td>The reaper worker is an app that removes orphaned connections from the <code>worker-app-dev</code> and <code>worker-app-logs</code> apps to Redis.
		<br><br>
		PCF Metrics requires the reaper worker because Redis does not remove its connections to <code>worker-app-dev</code> and <code>worker-app-logs</code> if they restart.</td>
	</tr>
</table>
