---
breadcrumb: App Metrics Documentation
title: Size App Metrics
owner: App Metrics
list_style_none: true
---


You can configure App Metrics depending on your deployment size. Use the information in this topic to
optimize App Metrics for high capacity, to reduce resource usage for smaller deployment sizes, and to scale your overall deployment.

If you are not familiar with App Metrics components, see [App Metrics architecture](./architecture.html) before you continue with this topic.

App Metrics depends on these datastores:

* Metric Store
* Log Store
* Postgres database

The Log Store and Postgres datastores are part of the App Metrics tile, and their scaling is discussed in more detail later in this topic. Metric Store datastore is separate.

## <a id='metrics-datastore'></a> Scaling the metrics datastore

App Metrics retrieves metrics from Metric Store, which has its own configuration for resizing.
For information, see the [Metric Store documentation](https://docs.vmware.com/en/Metric-Store/index.html#-metric-store-for-pcf-resources).

Currently, VMware recommends that you scale vertically rather than horizontally.
See [Limitations](https://docs.vmware.com/en/Metric-Store/index.html#limitations)
in the Metric Store documentation.


## <a id='configs-by-size'></a> Suggested sizing by deployment size

Use the following tables as a guide to configure your resources for deployment.

Estimate the size of your deployment according to how many apps you expect to deploy.

<table class=“table”>
<thead>
   <tr><th>Size</th><th>Purpose</th><th>Approximate number of app instances</th>
   </tr>
</thead>
   <tr><td><a href="#small">Small</a></td><td>Test use</td><td>100</td></tr>
   <tr><td><a href="#medium">Medium</a></td><td>Production use</td><td>5,000</td></tr>
   <tr><td><a href="#large">Large</a></td><td>Production use</td><td>15,000</td></tr>
</table>

**Metrics App** — App Metrics deploys the app, `appmetrics`. This app is responsible for serving the UI, relaying proxy requests from the browser to Metric Store and Log Store, and creating notifications for the user-created monitors.<br>
Scale the `appmetrics` app to one instance.

### <a id='small'></a>Deployment resources for a small deployment

Use the following example resource configuration to store approximately six weeks of data for a small deployment and about 100 application instances:

<table class=“table”>
<thead>
  <tr>
    <th>Job</th>
    <th>Instances</th>
    <th>Persistent Disk Type</th>
    <th width=40%>VM Type</th>
  </tr>
</thead>
  <tr>
    <td>PostgreSQL</td>
    <td>1 (not configurable)</td>
    <td>10 GB</td>
    <td>CPU Optimized with 4 or more CPUs and 8 GB or more memory.</td>
  </tr>
  <tr>
    <td>Log Store</td>
    <td>3</td>
    <td>200 GB</td>
    <td>Memory Optimized with 2 or more CPUs and 16 GB or more memory.</td>
  </tr>
</table>

### <a id='medium'></a>Deployment resources for a medium deployment

Use the following example resource configuration to store approximately six weeks of data for a medium deployment and about 5000 application instances:

<table class=“table”>
<thead>
  <tr>
    <th>Job</th>
    <th>Instances</th>
    <th>Persistent Disk Type</th>
    <th width=40%>VM Type</th>
  </tr>
</thead>
  <tr>
    <td>PostgreSQL</td>
    <td>1 (not configurable)</td>
    <td>10 GB</td>
    <td>CPU Optimized with 8 or more CPUs and 16 GB or more memory.</td>
  </tr>
  <tr>
    <td>Log Store</td>
    <td>3</td>
    <td>500 GB</td>
    <td>Memory Optimized with 4 or more CPUs and 32 GB or more memory.</td>
  </tr>
</table>

### <a id='large'></a>Deployment resources for a large deployment

Use the following example resource configuration to store approximately six weeks of data for a large deployment and about 15,000 application instances:

<table class=“table”>
<thead>
  <tr>
    <th>Job</th>
    <th>Instances</th>
    <th>Persistent Disk Type</th>
    <th width=40%>VM Type</th>
  </tr>
</thead>
  <tr>
    <td>PostgreSQL</td>
    <td>1 (not configurable)</td>
    <td>10 GB</td>
    <td>CPU Optimized with 8 or more CPUs and 16 GB or more memory.</td>
  </tr>
  <tr>
    <td>Log Store</td>
    <td>6</td>
    <td>500 GB</td>
    <td>Memory Optimized with 8 or more CPUs and 64 GB or more memory.</td>
  </tr>
</table>

## <a id='log-datastore'></a> Scaling the Log datastore

App Metrics retrieves logs from the Log Store.

By default, App Metrics ships with three extra large VMs with 500&nbsp;GB of persistent disk. You configure them in App Metrics tile Resource Config.

The scaling of an individual log-store deployment is subject to many variables, including:

* Required retention time
* Replication factor
* Log ingress volume
* The average size of log messages

<p class="note caution">
<span class="note__title">Caution</span>
Horizontally scaling in Log Store currently results in data loss. To ensure the
best possible results, practice vertical scaling.
</p>

### <a id='log-considerations'></a> Scaling considerations

**Scale baseline**

6x VMs at 8 core, 64&nbsp;GB RAM, 500&nbsp;GB persistent disk provides approximately 42 days
of log retention for an environment emitting 40,000 logs per second.

**Scale recommendations**

Maximum ingress throughput is primarily dependent on the number of VMs,
with secondary consideration of CPU and Memory resources.
Retention and Replication Factor primarily depends on the size of persistent disks attached to the VMs.
Abnormally high cardinality of indexed information, for example, `source_id` and `instance_id` can place pressure
on VM Memory.
This is possible even in the absence of high log volume.
