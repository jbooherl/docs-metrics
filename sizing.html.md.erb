---
breadcrumb: App Metrics Documentation
title: Size App Metrics
owner: App Metrics
list_style_none: true
---

<strong><%= modified_date %></strong>

You can configure App Metrics depending on your deployment size. Use the information in this topic to optimize App Metrics for high capacity, reduce resource usage for smaller deployment sizes and to scale your overall deployment.

If you are not familiar with App Metrics components, see [App Metrics architecture](https://docs.vmware.com/en/App-Metrics-for-VMware-Tanzu/2.1/app-metrics/GUID-architecture.html) before you continue with this topic.

If you are not familiar with the App Metrics components, review [App Metrics Product Architecture](./architecture.html) before reading this topic.

App Metrics depends on 3 datastores, the Metric Store, the Log Store, and the Postgres database.

Metric Store tile is separate, and will mostly be discussed elsewhere. The Log Store and Postgres database
are part of the App Metrics tile, and so their scaling will be discussed more in detail here.

##<a id='metrics-datastore'></a> Scaling the metrics datastore

App Metrics retrieves metrics from Metric Store, which has its own configuration for resizing.
For information, see [Metric Store documentation](https://docs.vmware.com/en/Metric-Store/index.html#-metric-store-for-pcf-resources).

Currently, VMware recommends that you scale vertically rather than horizontally.
See [Limitations](https://docs.vmware.com/en/Metric-Store/index.html#limitations)
in the _Metric Store_ documentation.

##<a id='configs-by-size'></a> Suggested Sizing by Deployment Size

Use the following tables as a guide for configuring resources for your deployment.

## <a id='configs-by-size'></a> Suggested sizing by deployment size

Use the following tables as a guide to configure your resources for deployment.

Estimate the size of your deployment according to how many apps you expect to deploy.

<table style='nice'>
   <tr><th>Size</th><th>Purpose</th><th>Approximate number of app instances</th></tr>
   <tr><td><a href="#small">Small</a></td><td>Test use</td><td>100</td></tr>
   <tr><td><a href="#medium">Medium</a></td><td>Production use</td><td>5,000</td></tr>
   <tr><td><a href="#large">Large</a></td><td>Production use</td><td>15,000</td></tr>
</table>

+ **Metrics App** â€” App Metrics deploys the app, `appmetrics`. This app is responsible for serving the UI, proxying requests from the browser to metric and log store, and creating notifications for the user-created monitors.<br><br>
The `appmetrics` app should be scaled to 1 instance.

###<a id='small'></a>Deploying resources for a small deployment

Example resource configuration to store approximately 6 weeks of data for a small deployment, about 100 application instances:

<table>
  <tr>
    <th>Job</th>
    <th>Instances</th>
    <th>Persistent Disk Type</th>
    <th width=40%>VM Type</th>
  </tr>
  <tr>
    <td>PostgreSQL</td>
    <td>1 (not configurable)</td>
    <td>10GB</td>
    <td>CPU Optimized with greater than or equal to 4 CPUs and greater than or equal to 8GB of memory</td>
  </tr>
  <tr>
    <td>Log Store</td>
    <td>3</td>
    <td>200GB</td>
    <td>Memory Optimized with greater than or equal to 2 CPUs and greater than or equal to 16GB of memory</td>
  </tr>
</table>

###<a id='medium'></a>Deploying resources for a medium deployment

Example resource configuration to store approximately 6 weeks of data for a medium deployment, about 5000 application instances:

<table>
  <tr>
    <th>Job</th>
    <th>Instances</th>
    <th>Persistent Disk Type</th>
    <th width=40%>VM Type</th>
  </tr>
  <tr>
    <td>PostgreSQL</td>
    <td>1 (not configurable)</td>
    <td>10GB</td>
    <td>CPU Optimized with greater than or equal to 8 CPUs and greater than or equal to 16GB of memory</td>
  </tr>
  <tr>
    <td>Log Store</td>
    <td>3</td>
    <td>500GB</td>
    <td>Memory Optimized with greater than or equal to 4 CPUs and greater than or equal to 32GB of memory</td>
  </tr>
</table>


###<a id='large'></a>Deploying resources for a large deployment

Example resource configuration to store approximately 6 weeks of data for a large deployment, about 15,000 application instances:

<table>
  <tr>
    <th>Job</th>
    <th>Instances</th>
    <th>Persistent Disk Type</th>
    <th width=40%>VM Type</th>
  </tr>
  <tr>
    <td>PostgreSQL</td>
    <td>1 (not configurable)</td>
    <td>10GB</td>
    <td>CPU Optimized with greater than or equal to 8 CPUs and greater than or equal to 16GB of memory</td>
  </tr>
  <tr>
    <td>Log Store</td>
    <td>6</td>
    <td>500GB</td>
    <td>Memory Optimized with greater than or equal to 8 CPUs and greater than or equal to 64GB of memory</td>
  </tr>
</table>


##<a id='log-datastore'></a> Scaling the Log Datastore

App Metrics retrieves logs from Log Store.

By default, App Metrics ships with three xlarge VMs with 500&nbsp;GB of persistent disk.
They can be configured in the App Metrics tile Resource Config.

The scaling of an individual log-store deployment is subject to many variables, including:

+ Required retention time
+ Replication factor
+ Log ingress volume
+ The average size of log messages

<p class="note"><strong>Note</strong>:
Horizontally scaling Log Store currently results in data loss. Vertical scaling is recommended at this time
</p>

###<a id='log-considerations'></a> Scaling considerations

**Scaling Baseline**

6x VMs at 8 core, 64&nbsp;GB RAM, 500&nbsp;GB persistent disk provides approximately 42 days
of log retention for an environment emitting 40,000 logs per second.

**Scaling Recommendations**

Maximum ingress throughput is primarily dependent on the number of VMs,
with secondary consideration to CPU and Memory resources.
Retention and Replication Factor primarily depends on the size of persistent disks attached to the VMs.
Abnormally high cardinality of indexed information (particularly source_id and instance_id) can place pressure
on VM Memory.
This is possible even in the absence of high log volume.
